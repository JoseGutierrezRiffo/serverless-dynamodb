service: serverless-dynamodb

custom:
  tableName: 'testing-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  saveItem:
    handler: handler.saveItem
    events:
      - http:
          path: item
          method: post
          cors: true
  getItem:
    handler: handler.getItem
    events:
      - http:
          path: item/{itemId}
          method: get
          cors: true
  getAllItem:
    handler: handler.getAllItem
    events:
      - http:
          path: item
          method: get
          cors: true
  updateItem:
    handler: handler.updateItem
    events:
      - http:
          path: item/{itemId}
          method: put
          cors: true
  deleteItem:
    handler: handler.deleteItem
    events:
      - http:
          path: item/{itemId}
          method: delete
          cors: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: itemId
            AttributeType: S
        KeySchema:
          -
            AttributeName: itemId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
